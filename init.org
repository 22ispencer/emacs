#+PROPERTY: header-args :comments org :tangle init.el

* Essentials

** Setup Straight.el
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq package-enable-at-startup nil)

  (setq straight-use-package-by-default t)
  (straight-use-package 'use-package)

#+END_SRC

** Merge Shell $PATH
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))
#+end_src

** General.el
This is a framework for adding vim-like keybindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    (general-nmap
     :prefix "SPC"
     "q e" 'iss-edit-config
     "q r" 'iss-reload-config
     "q q" 'save-buffers-kill-terminal
    ))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  (use-package evil
    :custom
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-u-delete t)
    (evil-want-Y-yank-to-eol t)
    :config
    (evil-mode 1))
  (use-package evil-collection
    :custom
    (evil-collection-setup-minibuffer t)
    (evil-undo-system 'undo-redo)
    :after (evil)
    :config
    (evil-collection-init))
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
  (use-package evil-snipe
    :custom
    (evil-snipe-scope 'buffer)
    (evil-snipe-repeat-scope 'whole-buffer)
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1))
  ;(use-package inhibit-mouse
  ;  :config
  ;  (inhibit-mouse-mode))
#+end_src

** Config Commands
#+begin_src emacs-lisp
  (defun iss-reload-config ()
    (interactive)
    (load user-init-file))
  (defun iss-edit-config ()
    (interactive)
    (find-file (file-name-concat (file-name-directory user-init-file) "init.org")))
#+end_src

* General config

** Useful
#+begin_src emacs-lisp
  (add-to-list 'safe-local-variable-values '(eval add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (setq calc-float-format '(eng 5))
  (use-package emacs
    :hook (prog-mode . electric-pair-mode)
    :custom
    ;; select help window when opening
    (help-window-select t)
    ;; Hide the toolbar
    (tool-bar-mode nil)
    ;; for vertico
    (enable-recursive-minibuffers t)
    (tab-always-indent 'complete)
    ;; disable spelling completion
    (text-mode-ispell-word-completion nil)
    (read-extended-command-predicate #'command-completion-default-include-p)
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt)))
#+end_src

** Graphic Settings

*** Font
#+begin_src emacs-lisp
  (let ((font-size (let ((hostname (system-name)))
  		   (cond ((equal hostname "JBRA-D1837") 230)
  			 (t 170)))))
    (set-face-attribute 'default nil :font "Monaspace Argon" :height font-size))

  ;; This assumes you've installed the package via MELPA.
  (use-package ligature
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
  					 ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
  					 "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
  					 "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
  					 "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
  					 "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
  					 "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
  					 "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
  					 ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
  					 "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
  					 "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
  					 "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
  					 "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

*** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-monokai-pro t))
#+end_src

*** Modeline
#+begin_src emacs-lisp
  (straight-register-package
   '(shrink-path
     :type git
     :host github
     :repo "emacsmirror/shrink-path"))
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

*** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-center-content t)
    (dashboard-vertically-center-content t)
    (dashboard-startup-banner 'logo)
    (dashboard-display-icons-p t)    
    (dashboard-icon-type 'nerd-icons) 
    (dashboard-projects-backend 'project-el)
    (dashboard-items '((recents  . 5)
		     (projects . 5)
		     (agenda   . 5)))
    :init
    (dashboard-setup-startup-hook))
#+end_src

* Languages

** General
#+begin_src emacs-lisp
  (use-package treesit
    :straight nil)

  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

** Clojure
#+begin_src emacs-lisp
  (use-package clojure-mode)
#+end_src

** Common Lisp
#+begin_src emacs-lisp
  (setq inferior-lisp-program (executable-find "sbcl"))
  (setq slime-contribs '(slime-asdf))
  (use-package slime)
#+end_src

** Eglot
#+begin_src emacs-lisp
#+end_src

** Janet
#+begin_src emacs-lisp
  (use-package janet-mode
    :straight t)
#+end_src

** Latex
#+begin_src emacs-lisp
  (use-package auctex
    :hook (TeX-after-compilation-finished-functions . TeX-revert-document-buffer)
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-view-program-selection '((output-pdf "PDF Tools"))
  			      TeX-source-correlate-start-server t))
#+end_src

** Org-mode
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-hide-emphasis-markers t)
    (org-startup-indented t)
    :general
    (:states 'normal
  	   :keymaps 'org-mode-map
  	   ", ," 'org-insert-structure-template
  	   "RET" 'org-open-at-point))
  (use-package org-bullets
    :after org)
#+end_src

*** Babel 
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
  (setq org-confirm-babel-evaluate nil)
  (setq python-indent-guess-indent-offset-verbose nil)
#+end_src

*** Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :general
    (:states 'normal
  	   :prefix "SPC r"
  	   "c" 'org-roam-capture
  	   "i" 'org-roam-node-insert
  	   "f" 'org-roam-node-find)
    :config
    (org-roam-db-autosync-mode))
#+end_src

** Python
#+begin_src emacs-lisp
  (defun uv-activate ()
    "Activate Python environment managed by uv based on current project directory.
  Looks for .venv directory in project root and activates the Python interpreter."
    (interactive)
    (let* ((project-root (project-root (project-current t)))
           (venv-path (expand-file-name ".venv" project-root))
           (python-path (expand-file-name
                         (if (eq system-type 'windows-nt)
                             "Scripts/python.exe"
                           "bin/python")
                         venv-path)))
      (if (file-exists-p python-path)
          (progn
            ;; Set Python interpreter path
            (setq python-shell-interpreter python-path)

            ;; Update exec-path to include the venv's bin directory
            (let ((venv-bin-dir (file-name-directory python-path)))
              (setq exec-path (cons venv-bin-dir
                                    (remove venv-bin-dir exec-path))))

            ;; Update PATH environment variable
            (setenv "PATH" (concat (file-name-directory python-path)
                                   path-separator
                                   (getenv "PATH")))

            ;; Update VIRTUAL_ENV environment variable
            (setenv "VIRTUAL_ENV" venv-path)

            ;; Remove PYTHONHOME if it exists
            (setenv "PYTHONHOME" nil)

            (message "Activated UV Python environment at %s" venv-path))
        (error "No UV Python environment found in %s" project-root))))
#+end_src

** Racket
#+begin_src emacs-lisp
  (use-package racket-mode)
#+end_src

** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :hook eglot)
#+end_src


* Dev Tools

** Completion

*** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** In-Buffer Completion
#+begin_src emacs-lisp
  (use-package corfu
    :after emacs
    :custom
    (corfu-auto t)
    (corfu-quit-no-match 'separator)
    :general
    (:states 'insert
             "C-n" #'corfu-next
             "C-p" #'corfu-previous
             ;"<escape>" #'corfu-quit
             "C-SPC" #'corfu-insert
             "M-d" #'corfu-show-documentation
             "M-l" #'corfu-show-location)
    :init
    (global-corfu-mode))
#+end_src

*** Minibuffer Completion
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))
#+end_src

** Formatting
#+begin_src emacs-lisp
  (use-package reformatter)
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :general
    (:states 'normal "SPC g" 'magit))
#+end_src

** Dirvish
#+begin_src emacs-lisp
  (use-package dirvish)
#+end_src

** Vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** PDF Tools
#+begin_src emacs-lisp
  (defun my/disable-line-numbers-mode ()
    (display-line-numbers-mode -1))

  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :hook (pdf-view-mode . my/disable-line-numbers-mode)
    :config
    (pdf-loader-install))
#+end_src

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
